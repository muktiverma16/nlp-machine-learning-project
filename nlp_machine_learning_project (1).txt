#1.  Text Preprocessing and Cleaning with NLTK

Welcome to the Text Preprocessing and Cleaning repository! This project provides a comprehensive guide and a set of tools for preprocessing and cleaning text data using the Natural Language Toolkit (NLTK) in Python.

## Introduction

Text preprocessing and cleaning are crucial steps in Natural Language Processing (NLP) tasks. This repository offers various functions to handle common text preprocessing tasks, such as tokenization, stopword removal, stemming, lemmatization, and more, using the NLTK library.

## Features

- Tokenization (word and sentence)
- Stopword removal
- Stemming
- Lemmatization
- Lowercasing text
- Removing punctuation
- Removing special characters and numbers
- Removing extra whitespace

# 2. Myspeech_assistant (MySpeechAssistant)

Welcome to MySpeechAssistant, a simple speech assistant created by Mukti. This project utilizes the `win32com` library to convert text input into spoken words using the SAPI.SpVoice API.

## Introduction

MySpeechAssistant is a Python script that leverages the `win32com` library to create a text-to-speech (TTS) system. Users can input text, and the assistant will speak the text aloud. The program runs in a loop, allowing continuous input until the user decides to quit by entering 'q'.

## Features

- Converts text input to speech using the SAPI.SpVoice API.
- Simple and easy-to-use command-line interface.
- Continuous input loop for multiple text entries.

## Installation

To run MySpeechAssistant, you need to have Python installed on your system along with the `pywin32` library.


# 3. weather_app (WeatherSpeechAssistant)

Welcome to WeatherSpeechAssistant, a simple Python script that fetches the current weather information for a specified city and reads it aloud using the `win32com` library.

## Introduction

WeatherSpeechAssistant is a Python script that uses the WeatherAPI to fetch current weather data for a given city and the `win32com` library to convert the weather information into speech. This provides a convenient way to get weather updates audibly.

## Features

- Fetches current weather information for any specified city.
- Converts the weather information to speech using SAPI.SpVoice API.
- Simple command-line interface for easy interaction.

## Installation

To run WeatherSpeechAssistant, you need to have Python installed on your system along with the `requests` and `pywin32` libraries. 

# 4. speech_recognition_model (SpeechRecognitionAssistant)

Welcome to SpeechRecognitionAssistant, a simple Python script that captures audio from a microphone and recognizes speech using the Google Web Speech API.

## Introduction

SpeechRecognitionAssistant is a Python script that leverages the `speech_recognition` library to capture audio input from a microphone and convert it to text using the Google Web Speech API. This provides a convenient way to transcribe spoken words into text.

## Features

- Captures audio from the microphone.
- Recognizes speech using the Google Web Speech API.
- Handles errors for unrecognized speech and API request issues.
- Simple and interactive command-line interface.

## Installation

To run SpeechRecognitionAssistant, you need to have Python installed on your system along with the `speech_recognition` library. 

# 5. senti.py (TextSentimentAnalyzer using TextBlob)

Welcome to TextSentimentAnalyzer, a simple Python script that analyzes the sentiment of text using the `TextBlob` library. This script determines the polarity and subjectivity of given text inputs.

## Introduction

TextSentimentAnalyzer is a Python script that leverages the `TextBlob` library to analyze the sentiment of text. It calculates the polarity (how positive or negative a statement is) and the subjectivity (how subjective or objective a statement is) of given text inputs.

## Features

- Determines the polarity of text.
- Determines the subjectivity of text.
- Simple and easy-to-use command-line interface.

## Installation

To run TextSentimentAnalyzer, you need to have Python installed on your system along with the `textblob` library.

# 6. senti2.py (VADER SentimentAnalyzer)

Welcome to VADERSentimentAnalyzer, a simple Python script that analyzes the sentiment of text using the `vaderSentiment` library. This script calculates sentiment scores for given text inputs.

## Introduction

VADERSentimentAnalyzer is a Python script that leverages the `vaderSentiment` library to analyze the sentiment of text. It calculates sentiment scores, including positive, neutral, negative, and compound scores, for given text inputs.

## Features

- Calculates positive, neutral, negative, and compound sentiment scores of text.
- Simple and easy-to-use command-line interface.

## Installation

To run VADERSentimentAnalyzer, you need to have Python installed on your system along with the `vaderSentiment` library.

# 7. text_to_speech.py (Text-to-Speech Program)

Welcome to the Text-to-Speech program, a simple Python script that converts text input into speech using the `pyttsx3` library. This script is designed for Windows 10.

## Introduction

This Text-to-Speech program leverages the `pyttsx3` library to convert text input from the user into spoken words. It provides a simple and interactive command-line interface for text-to-speech conversion.

## Features

- Converts text input into speech.
- Simple and easy-to-use command-line interface.
- Continuous input loop for multiple text entries.
- Designed for Windows 10.

## Installation

To run the Text-to-Speech program, you need to have Python installed on your system along with the `pyttsx3` library. 

# 8. speech_to_text.py (Speech-to-Text Program)

Welcome to the Speech-to-Text program, a simple Python script that converts speech from the microphone to text using the `speech_recognition` library. This script is designed for general use on any operating system with a microphone.

## Introduction

This Speech-to-Text program leverages the `speech_recognition` library to capture audio input from a microphone and convert it to text using the Google Web Speech API. It provides a simple and interactive command-line interface for speech recognition.

## Features

- Captures audio from the microphone.
- Converts speech to text using the Google Web Speech API.
- Handles errors for unrecognized speech and API request issues.
- Simple and interactive command-line interface.

## Installation

To run the Speech-to-Text program, you need to have Python installed on your system along with the `speech_recognition` library.